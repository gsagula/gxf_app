package(
    default_visibility = ["//visibility:public"],
)

filegroup(
    name = "binaries",
    srcs = glob([
        "**/*.so",
    ]),
)

filegroup(
    name = "headers",
    srcs = glob([
        "**/*.h",
        "**/*.hpp",
    ]),
)

filegroup(
    name = "python_binaries",
    srcs = glob([
        "python/**/*.so",
    ]),
)

filegroup(
    name = "python_sources",
    srcs = glob([
        "python/**/*.py",
    ]),
)

filegroup(
    name = "usd_srcs",
    srcs = glob([
        "lib/**/*",
        "lib64/**/*",
        "plugin/**/*",
        "include/**/*",
        "python/lib/**/*.so*",
        "python/lib/**/*.py",
        "python/include/**/*.h",
        "python/include/**/*.hpp",
    ]),
)

cc_library(
    name = "usd",
    srcs = glob([
        "lib/cmake/**/*.so",
        "lib/draco/**/*.so",
        "lib/libAlembic.so",
        "lib/libAlembic.so.1.7",
        "lib/libAlembic.so.1.7.10",
        "lib/libboost_atomic.so",
        "lib/libboost_date_time.so",
        "lib/libboost_date_time.so.1",
        "lib/libboost_date_time.so.1.70",
        "lib/libboost_date_time.so.1.70.0",
        "lib/libboost_filesystem.so",
        "lib/libboost_program_options.so",
        "lib/libboost_python37.so",
        "lib/libboost_regex.so",
        "lib/libboost_system.so",
        "lib/libboost_thread.so",
        "lib/libdracodec.so",
        "lib/libdracoenc.so",
        "lib/libdraco.so",
        "lib/libdraco.so.1",
        "lib/libjpeg.so",
        "lib/libMaterialXCore.so",
        "lib/libMaterialXFormat.so",
        "lib/libMaterialXGenGlsl.so",
        "lib/libMaterialXGenMdl.so",
        "lib/libMaterialXGenOsl.so",
        "lib/libMaterialXGenShader.so",
        "lib/libMaterialXRenderGlsl.so",
        "lib/libMaterialXRenderHw.so",
        "lib/libMaterialXRenderOsl.so",
        "lib/libMaterialXRender.so",
        "lib/libosdCPU.so",
        "lib/libosdGPU.so",
        "lib/libtbb_debug.so",
        "lib/libtbb_debug.so.2",
        "lib/libtbbmalloc_debug.so",
        "lib/libtbbmalloc_debug.so.2",
        # "lib/libtbbmalloc_proxy_debug.so",
        # "lib/libtbbmalloc_proxy_debug.so.2",
        # "lib/libtbbmalloc_proxy.so",
        # "lib/libtbbmalloc_proxy.so.2",
        "lib/libtbbmalloc.so",
        "lib/libtbbmalloc.so.2",
        "lib/libusd_arch.so",
        "lib/libusd_ar.so",
        "lib/libusd_cameraUtil.so",
        "lib/libusd_garch.so",
        "lib/libusd_geomUtil.so",
        "lib/libusd_gf.so",
        "lib/libusd_glf.so",
        "lib/libusd_hdGp.so",
        "lib/libusd_hdMtlx.so",
        "lib/libusd_hdsi.so",
        "lib/libusd_hd.so",
        "lib/libusd_hdSt.so",
        "lib/libusd_hdx.so",
        "lib/libusd_hf.so",
        "lib/libusd_hgiGL.so",
        "lib/libusd_hgiInterop.so",
        "lib/libusd_hgi.so",
        "lib/libusd_hio.so",
        "lib/libusd_js.so",
        "lib/libusd_kind.so",
        "lib/libusd_ndr.so",
        "lib/libusd_pcp.so",
        "lib/libusd_plug.so",
        "lib/libusd_pxOsd.so",
        "lib/libusd_sdf.so",
        "lib/libusd_sdr.so",
        "lib/libusd_tf.so",
        "lib/libusd_trace.so",
        "lib/libusd_usdAppUtils.so",
        "lib/libusd_usdBakeMtlx.so",
        "lib/libusd_usdGeom.so",
        "lib/libusd_usdHydra.so",
        "lib/libusd_usdImagingGL.so",
        "lib/libusd_usdImaging.so",
        "lib/libusd_usdLux.so",
        "lib/libusd_usdMedia.so",
        "lib/libusd_usdMtlx.so",
        "lib/libusd_usdPhysics.so",
        "lib/libusd_usdProcImaging.so",
        "lib/libusd_usdProc.so",
        "lib/libusd_usdRender.so",
        "lib/libusd_usdRiImaging.so",
        "lib/libusd_usdRi.so",
        "lib/libusd_usdShade.so",
        "lib/libusd_usdSkelImaging.so",
        "lib/libusd_usdSkel.so",
        "lib/libusd_usd.so",
        "lib/libusd_usdUI.so",
        "lib/libusd_usdUtils.so",
        "lib/libusd_usdviewq.so",
        "lib/libusd_usdVolImaging.so",
        "lib/libusd_usdVol.so",
        "lib/libusd_vt.so",
        "lib/libusd_work.so",
        "lib/pkgconfig/**/*.so",
        "lib/python/**/*.so",
        "lib/usd/**/*.so",
        "lib64/**/*.so*",
        "plugin/**/*.so*",
        "share/**/*.so*",
    ]),
    hdrs = glob([
        "include/**/*.h",
        "include/**/*.hpp",
    ]),
    data = [
        ":usd_srcs",
    ],
    includes = ["include"],
    deps = [
        ":python",
    ],
)

cc_library(
    name = "python",
    srcs = glob([
        "python/lib/**/*.so*",
    ]),
    hdrs = glob([
        "python/include/python3.7m/**/*.h",
        "python/include/python3.7m/**/*.hpp",
    ]),
    data = [
        ":usd_srcs",
    ],
    includes = ["python/include/python3.7m"],
)
